// Copyright 2024 Hanyu Wang
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Following https://www.verilog.com/VerilogBNF.html

// 1. Source Text
start: description 

description: (macro_definition | timescale_directive | module)+

// 1.1 Macros
macro_definition: "`define" identifier macro_body
macro_body: /.+/

// 1.2 Timescale Directive
timescale_directive: "`timescale" time_unit "/" time_precision
time_unit: NUMBER time_identifier
time_precision: NUMBER time_identifier
time_identifier: "s" -> s | "ms" -> ms | "us" -> us | "ns" -> ns | "ps" -> ps

// 1.3 Module Declaration
?module: "module" module_definition ";" module_body* "endmodule"
// TODO (fixed): this is a terrible way to define a module
// This way we can check the meta data of the module to decide the port list and parameter list
module_definition: CNAME parameter_list? port_list?

// 1.3.1 Parameter List
parameter_list: "#(" parameter_declaration ("," parameter_declaration)* ")"
parameter_declaration: parameter_type? CNAME "=" parameter_value
parameter_type: "parameter" | "localparam"

// 1.3.2 Port List
port_list: "(" port_declaration_head ("," port_declaration_head)* ")"
port_declaration_head: port_header? (extended_port_head | simple_port_head) // This is a workaround to avoid the ambiguity of the variable numbers
extended_port_head: port_range variable_name
simple_port_head: variable_name

// 1.4 Module. i.e., what is inside a module
?module_body: always_block
            | initial_block
            | port_declaration ";" // This includes reg, wire, integer, real, time, realtime
            | parameter_assignment // This includes parameters and localparams
            | variable_assignment ";" // This includes assign
            | system_task
            | dollar_indentifier ";" // Special cases like $finish
            | module_instantiation // This includes module instantiation
            | define_parameter // This includes defparam

// 1.5 Module Instantiation
parameter_instance: "#" "(" parameter_instance_arguments ")"
parameter_instance_arguments: parameter_instance_argument ("," parameter_instance_argument)*
?parameter_instance_argument: signal | extended_based_number

module_instantiation: CNAME parameter_instance? CNAME "(" module_instance_arguments ")" ";"
module_instance_arguments: module_instance_argument ("," module_instance_argument)*
?module_instance_argument: standard_module_instance_argument | short_module_instance_argument

standard_module_instance_argument: "." CNAME "(" (signal|extended_based_number)? ")"
short_module_instance_argument: signal | extended_based_number


// 1.6 Define Parameter
define_parameter: "defparam" parameter_definitions? ";"
parameter_definitions: parameter_definition ("," parameter_definition)*
parameter_definition: module_parameter "=" expression

// 2. Declarations

// 2.1 Parameter Declarations
// These are merged with module instantiations
parameter_assignment: parameter_type port_range? CNAME "=" parameter_value ";"
parameter_value: expression

// 2.2 Port Declarations
port_direction: "input" -> input | "output" -> output | "inout" -> inout

// 2.3 Variable Declarations and Assignments
// the block statement is a statement block or a single statement
always_block: "always" "@" "(" event_expression ")" single_or_block_statement
event_expression: "posedge" CNAME -> sequential_event
                | "negedge" CNAME -> sequential_event
                | macro_usage
                | variable_name
                | "*" -> combinational_event
                | event_expression event_operator event_expression

event_operator: "or" | "and"

initial_block: "initial" single_or_block_statement

// 2.4 Variable Assignments
// TODO: The challenge here is to differentiate between the non-blocking assignments and the comparison expressions
// In Verilog, the assignment operator is "=". However, the "<=" operator is used for non-blocking assignments.
variable_assignment: "assign"? signal assignment_operator expression

assignment_operator: "=" -> blocking_assignment | "<=" -> non_blocking_assignment

// 2.5 Variable Declarations

// TODO (fixed): this is a terrible way to define a port module_body
// we need to avoid the ambiguity of the variable numbers
// port_declaration: port_direction? signal_type? port_range? CNAME
port_declaration: port_header? (extended_port | simple_port) // This is a workaround to avoid the ambiguity of the variable numbers

// TODO: this might cause problem if we only have signal_type without port_direction
port_header: signal_type -> header0 
        | port_direction -> header1
        | port_direction signal_type -> header2
extended_port: port_range variable_list
simple_port: variable_list

// WARNING: This should not be flattened, i.e., we should not use ? to bypass the AST level
variable_list: variable_name ("," variable_name)*

// 3. Statements
statement: variable_assignment ";"
            | conditional_statement
            | case_statement
            | system_task
            | dollar_indentifier ";"

// 3.1 Conditional Statements
// The "if" statement is used to execute a block of code if a condition is true. If the condition is false, another block of code can be executed with the "else" statement.
conditional_statement: if_statement else_if_statements? else_statement?
if_statement: "if" "(" expression ")" single_or_block_statement
else_if_statements: else_if_statement+
else_if_statement: "else if" "(" expression ")" single_or_block_statement
else_statement: "else" single_or_block_statement

// the block statement is a statement block or a single statement 
// (1) statement_block: "begin" statement+ "end"
// (2) single_statement: statement
?single_or_block_statement: statement_block | single_statement
?statement_block: "begin" statement+ "end"
single_statement: statement


// 3.3 Case Statements
case_statement: "case" "(" expression ")" case_content "endcase"
case_content: case_item+
default_case: "default" ":" statement_block
case_item: case_label ":" case_action
case_label: CNAME
            | regular_number 
            | extended_based_number // You may want to support other constants or expressions as labels
?case_action: statement_block | single_statement


// 4. Declarations types
signal_type: "reg" -> reg | "wire" -> wire | "integer" -> integer | "real" -> real

// 5. Advanced system tasks
system_task: dollar_indentifier "(" [task_arguments] ")" ";"
task_arguments: expression ("," expression)*
dollar_indentifier: "$" /[a-zA-Z_][a-zA-Z0-9_]*/

// 5.1 Function calls
function_call: dollar_indentifier function_parameters?
?function_parameters: "(" expression ")"

// 6. Signals

// 6.1 Signal Concatenation
array_indexing: CNAME "[" expression "]" // Array indexing
array_slicing: CNAME "[" expression ":" expression "]" // Array slicing
?signal: signal_base | "!" signal_base

?signal_base: variable_name
            | array_indexing
            | array_slicing
            | concatenation

// we need to avoid the ambiguity of the variable numbers, the variable name is CNAME, except for the keywords in variable_blacklist
variable_name: CNAME | ESCAPED_STRING

variable_blacklist: signal_type | port_direction

// 6.2 Module parameters
module_parameter: CNAME "." CNAME

// 7. Ranges
port_range : "[" expression ":" expression "]"

// 8. Expressions
expression: macro_usage
            | variable_name
            | string
            | regular_number
            | extended_based_number // You may want to support other constants or expressions
            | expression binary_operator expression // Binary operators are treated as expressions
            | unary_operator expression // Unary operators are treated as expressions
            | conditional_expression // Conditional expressions are treated as expressions
            | "(" expression ")" // Parentheses are treated as expressions
            | concatenation // Concatenation is treated as an expression
            | repeated_concatenation // Repeated concatenation is treated as an expression
            | array_indexing // Array indexing is treated as an expression
            | array_slicing // Array slicing is treated as an expression
            | function_call // Function calls are treated as expressions
            | based_number

macro_usage: "`" CNAME

// 8.1 Operators
// Operators are used to perform operations on variables and values.
binary_operator: "+"    -> binary_add       // Addition or unary plus
                | "-"   -> binary_sub       // Subtraction or unary negation
                | "*"   -> binary_mul       // Multiplication
                | "/"   -> binary_div       // Division
                | "&&"  -> binary_and       // Logical AND
                | "||"  -> binary_or        // Logical OR
                | "&"   -> binary_bitand    // Bitwise AND
                | "|"   -> binary_bitor     // Bitwise OR
                | "^"   -> binary_xor       // Bitwise XOR
                | ">>"  -> binary_rshift    // Shift right
                | ">>>" -> binary_rshift_ext// Shift right with sign extension
                | "<<"  -> binary_lshift    // Shift left
                | "<<<" -> binary_lshift_ext// Shift left with sign extension
                | "%"   -> binary_mod       // Modulus
// 3.1.1 Comparison Expressions
// Comparison expressions are used to compare two values. The result of the comparison is a boolean value (true or false).
// The comparison operators are "==" (equal), "!=" (not equal), "<" (less than), ">" (greater than), "<=" (less than or equal to), and ">=" (greater than or equal to).
                | "=="  -> binary_eq        // Equal
                | "!="  -> binary_neq       // Not equal
                | "<"   -> binary_lt        // Less than
                | ">"   -> binary_gt        // Greater than
                | "<="  -> binary_leq       // Less than or equal
                | ">="  -> binary_geq       // Greater than or equal
                | "===" -> binary_eq_ext    // Case equality
                | "!==" -> binary_neq_ext   // Case inequality

unary_operator: "!"     -> unary_not
                | "~"   -> unary_inv
                | "^"   -> unary_xor // TODO: figure out what this is
                | "+"   -> unary_pos // Unary plus (extend as needed)
                | "-"   -> unary_neg // Unary minus (extend as needed)

// 8.2 Concatenation and Repetition
concatenation: "{" expression ("," expression)* "}"
repeated_concatenation: "{" expression "{" expression "}" "}"

// 8.3 Conditional Expressions
conditional_expression: expression "?" expression ":" expression

// special characters
string: /"[^"]*"/  // Captures a sequence of characters within double quotes

// 9. Numbers
based_number: /'[bdh][0-9a-fA-F_]+/
extended_based_number: /([0-9]*)'[bdhoBDHO][0-9a-fA-F_xXzZ]+/
regular_number: /(?<![\d'])\d+(?![\d'bhd])/

// 10. General
?identifier: CNAME
            | ESCAPED_IDENTIFIER

// Lark
ESCAPED_IDENTIFIER: /\\([^\s]+)/
COMMENT: "//" /[^\n]*/ NEWLINE
INLINE_COMMENT: "(*" /[^\n]*/ "*)"
NEWLINE: "\n"
MULTILINE_COMMENT: /\/\*(\*(?!\/)|[^*])*\*\//

%import common.CNAME
%import common.NUMBER
%import common.ESCAPED_STRING
%import common.WS

%ignore WS
%ignore COMMENT
%ignore MULTILINE_COMMENT
%ignore NEWLINE
%ignore INLINE_COMMENT
